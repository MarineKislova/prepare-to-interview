const questionsJavaScript = [
  /* https://habr.com/ru/articles/486820/ */

  {
    id: 1,
    question: "В чем разница между null и undefined?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#1",
      linkName: "answer on habr.com",
      answer1:
        "Для начала давайте поговорим о том, что у них общего.Во-первых, они принадлежат к 7 «примитивам» (примитивным типам) JS (Number, String, Boolean, Symbol, undefined, null, BigInt). Во-вторых, они являются ложными значениями, т.е. результатом их преобразования в логическое значение с помощью Boolean() или оператора '!!' является false.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },

  {
    id: 2,
    question: "Для чего используется оператор ' && ' ?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#2",
      linkName: "answer on habr.com",
      answer1: "Оператор '&&' (логическое и) находит и возвращает первое ложное значение либо последний операнд, когда все значения истинные. Он использует короткое замыкание во избежание лишних затрат: console.log(false && 1 && []) // false, console.log(' ' && true && 5) // 5. При этом второй операнд не вычисляется.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 3,
    question: "Для чего используется оператор ' || ' ?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#3",
      linkName: "answer on habr.com",
      answer1: "Оператор '||' (логическое или) находит и возвращает первое истинное значение. Он также использует короткое замыкание. Данный оператор использовался для присвоения параметров по умолчанию в функциях до того, как параметры по умолчанию были стандартизированы в ES6.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 4,
    question:
      "Является ли использование унарного плюса (оператор ' + ') самым быстрым способом преобразования строки в число?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#4",
      linkName: "answer on habr.com",
      answer1: "Согласно MDN оператор "+" действительно является самым быстрым способом преобразования строки в число, поскольку он не выполняет никаких операций со значением, которое является числом.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 5,
    question: "Что такое DOM?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#5",
      linkName: "answer on habr.com",
      answer1: "DOM или Document Object Model (объектная модель документа) — это прикладной программный интерфейс (API) для работы с HTML и XML документами. Когда браузер первый раз читает («парсит») HTML документ, он формирует большой объект, действительно большой объект, основанный на документе — DOM. DOM представляет собой древовидную структуру (дерево документа). DOM используется для взаимодействия и изменения самой структуры DOM или его отдельных элементов и узлов.",
      image1: "",
      href2: "https://learn.javascript.ru/dom-nodes",
      linkName2: "Современный учебник JavaScript",
      answer2: "Основой HTML-документа являются теги.В соответствии с объектной моделью документа («Document Object Model», коротко DOM), каждый HTML-тег является объектом. Вложенные теги являются «детьми» родительского элемента. Текст, который находится внутри тега, также является объектом.Все эти объекты доступны при помощи JavaScript, мы можем использовать их для изменения страницы.",
      image2: "",
    },
  },
  {
    id: 6,
    question: "Что такое распространение события (Event Propogation)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#6",
      linkName: "answer on habr.com",
      answer1: "Когда какое-либо событие происходит в элементе DOM, оно на самом деле происходит не только в нем. Событие «распространяется» от объекта Window до вызвавшего его элемента (event.target). При этом событие последовательно пронизывает (затрагивает) всех предков целевого элемента. Распространение события имеет три стадии или фазы: 1. Фаза погружения (захвата, перехвата) — событие возникает в объекте Window и опускается до цели события через всех ее предков. 2. Целевая фаза — это когда событие достигает целевого элемента. 3. Фаза всплытия — событие поднимается от event.target, последовательно проходит через всех его предков и достигает объекта Window.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 7,
    question: "Что такое всплытие события (Event Bubbling)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#7",
      linkName: "answer on habr.com",
      answer1: "Когда событие происходит в элементе DOM, оно затрагивает не только этот элемент. Событие «всплывает» (подобно пузырьку воздуха в воде), переходит от элемента, вызвавшего событие (event.target), к его родителю, затем поднимается еще выше, к родителю родителя элемента, пока не достигает объекта Window.",
      image1: "",
      href2: "https://learn.javascript.ru/bubbling-and-capturing",
      linkName2: "Современный учебник JavaScript",
      answer2: "Когда на элементе происходит событие, обработчики сначала срабатывают на нём, потом на его родителе, затем выше и так далее, вверх по цепочке предков. Поэтому если кликнуть на <p>, то мы увидим три оповещения: p → div → form.Этот процесс называется «всплытием», потому что события «всплывают» от внутреннего элемента вверх через родителей подобно тому, как всплывает пузырёк воздуха в воде. Почти все события всплывают. Ключевое слово в этой фразе – «почти». Например, событие focus не всплывает. В дальнейшем мы увидим и другие примеры. Однако, стоит понимать, что это скорее исключение, чем правило, всё-таки большинство событий всплывают. Всегда можно узнать, на каком конкретно элементе произошло событие. Самый глубокий элемент, который вызывает событие, называется целевым элементом, и он доступен через event.target. Отличия от this (=event.currentTarget): 1. event.target – это «целевой» элемент, на котором произошло событие, в процессе всплытия он неизменен. 2. this – это «текущий» элемент, до которого дошло всплытие, на нём сейчас выполняется обработчик. Например, если стоит только один обработчик form.onclick, то он «поймает» все клики внутри формы. Где бы ни был клик внутри – он всплывёт до элемента <form>, на котором сработает обработчик.",
      image2: "",
    },
  },
  {
    id: 8,
    question: "Что такое погружение события (Event Capturing)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#8",
      linkName: "answer on habr.com",
      answer1: "Когда событие происходит в элементе DOM, оно происходит не только в нем. В фазе погружения событие опускается от объекта Window до цели события через всех его предков. У метода addEventListener есть третий необязательный параметр — useCapture. Когда его значение равняется false (по умолчанию), событие начинается с фазы всплытия. Когда его значение равняется true, событие начинается с фазы погружения. Если мы кликнем по элементу child, то увидим в консоли следующее: window, document, html, grandparent, parent, child. Это и есть погружение события.",
      image1: "",
      href2: "https://learn.javascript.ru/bubbling-and-capturing",
      linkName2: "современный учебник JavaScript",
      answer2: "Существует ещё одна фаза из жизненного цикла события – «погружение» (иногда её называют «перехват»). Она очень редко используется в реальном коде, однако тоже может быть полезной. То есть при клике на <td> событие путешествует по цепочке родителей сначала вниз к элементу (погружается), затем оно достигает целевой элемент (фаза цели), а потом идёт наверх (всплытие), вызывая по пути обработчики. Обработчики, добавленные через on<event>-свойство или через HTML-атрибуты, или через addEventListener(event, handler) с двумя аргументами, ничего не знают о фазе погружения, а работают только на 2-ой и 3-ей фазах. Чтобы поймать событие на стадии погружения, нужно использовать третий аргумент capture вот так: elem.addEventListener(..., {capture: true}) Существуют два варианта значений опции capture: Если аргумент false (по умолчанию), то событие будет поймано при всплытии. Если аргумент true, то событие будет перехвачено при погружении.  Обратите внимание, что хоть и формально существует 3 фазы, 2-ую фазу («фазу цели»: событие достигло элемента) нельзя обработать отдельно, при её достижении вызываются все обработчики: и на всплытие, и на погружение. ",
      image2: "",
    },
  },
  {
    id: 9,
    question:
      "В чем разница между методами event.preventDefault() и event.stopPropagation()?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#9",
      linkName: "answer on habr.com",
      answer1: "Метод event.preventDefault() отключает поведение элемента по умолчанию. Если использовать этот метод в элементе form, то он предотвратит отправку формы (submit). Если использовать его в contextmenu, то контекстное меню будет отключено (данный метод часто используется в keydown для переопределения клавиатуры, например, при создании музыкального/видео плеера или текстового редактора — прим. пер.). Метод event.stopPropagation() отключает распространение события (его всплытие или погружение).",
      image1: "",
      href2: "https://learn.javascript.ru/bubbling-and-capturing",
      linkName2: "современный учебник JavaScript",
      answer2: "Всплытие идёт с «целевого» элемента прямо наверх. По умолчанию событие будет всплывать до элемента <html>, а затем до объекта document, а иногда даже до window, вызывая все обработчики на своём пути.Но любой промежуточный обработчик может решить, что событие полностью обработано, и остановить всплытие. Для этого нужно вызвать метод event.stopPropagation(). Event.preventDefault() Для многих браузерных событий есть «действия по умолчанию», такие как переход по ссылке, выделение и т.п. Для новых, пользовательских событий браузерных действий, конечно, нет, но код, который генерирует такое событие, может предусматривать какие-то свои действия после события. Вызов event.preventDefault() является возможностью для обработчика события сообщить в сгенерировавший событие код, что эти действия надо отменить.",
      image2: "",
    },
  },
  {
    id: 10,
    question: "Как узнать об использовании метода event.preventDefault()?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#10",
      linkName: "answer on habr.com",
      answer1: "Для этого мы можем использовать свойство event.defaulPrevented, возвращающее логическое значение, служащее индикатором применения к элементу метода event.preventDefault.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 11,
    question: "Почему obj.someprop.x приводит к ошибке?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#11",
      linkName: "answer on habr.com",
      answer1: "const obj = {} console.log(obj.someprop.x) Ответ очевиден: мы пытается получить доступ к свойству x свойства someprop, которое имеет значение undefined. obj.__proto__.__proto = null, поэтому возвращается undefined, а у undefined нет свойства x.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 12,
    question: "Что такое цель события или целевой элемент (event.target)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#12",
      linkName: "answer on habr.com",
      answer1: "Простыми словами, event.target — это элемент, в котором происходит событие, или элемент, вызвавший событие.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 13,
    question: "Что такое текущая цель события (event.currentTarget)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#13",
      linkName: "answer on habr.com",
      answer1: "Event.currentTarget — это элемент, к которому прикреплен прослушиватель событий.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 14,
    question: "В чем разница между операторами ' == ' и ')' === ' ?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#14",
      linkName: "answer on habr.com",
      answer1: "Разница между оператором "==" (абстрактное или нестрогое равенство) и оператором "===" (строгое равенство) состоит в том, что первый сравнивает значения после их преобразования или приведения к одному типу (Coersion), а второй — без такого преобразования.",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 15,
    question:
      "Почему результатом сравнения двух похожих объектов является false?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#15",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 16,
    question: "Для чего используется оператор '!!'?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#16",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 17,
    question: "Как записать несколько выражений в одну строку?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#17",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 18,
    question: "Что такое поднятие (Hoisting)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#18",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 19,
    question: "Что такое область видимости (Scope)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#19",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 20,
    question: "Что такое замыкание (Closures)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#20",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 21,
    question: "Какие значения в JS являются ложными?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#21",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 22,
    question: "Как проверить, является ли значение ложным?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#22",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 23,
    question: "Для чего используется директива «use strict»?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#23",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 24,
    question: "Какое значение имеет this?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#24",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 25,
    question: "Что такое прототип объекта?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#25",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 26,
    question: "Что такое IIFE?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#26",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 27,
    question: "Для чего используется метод Function.prototype.apply?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#27",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 28,
    question: "Для чего используется метод Function.prototype.call?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#28",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 29,
    question: "В чем разница между методами call и apply?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#29",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 30,
    question: "Для чего используется метод Function.prototype.bind?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#30",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 31,
    question:
      "Что такое функциональное программирование и какие особенности JS позволяют говорить о нем как о функциональном языке программирования?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#31",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 32,
    question: "Что такое функции высшего порядка (Higher Order Functions)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#32",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 33,
    question:
      "Почему функции в JS называют объектами первого класса (First-class Objects)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#33",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 34,
    question: "Как бы Вы реализовали метод Array.prototype.map?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#34",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },

  {
    id: 35,
    question: "Как бы Вы реализовали метод Array.prototype.filter?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#35",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 36,
    question: "Как бы Вы реализовали метод Array.prototype.reduce?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#36",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 37,
    question: "Что такое объект arguments?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#37",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 38,
    question: "Как создать объект, не имеющий прототипа?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#38",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 39,
    question:
      "Почему в представленном коде переменная b становится глобальной при вызове функции?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#39",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 40,
    question: "Что такое ECMAScript?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#40",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 41,
    question: "Что нового привнес в JS стандарт ES6 или ECMAScript2015?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#41",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 42,
    question: "В чем разница между ключевыми словами «var», «let» и «const»?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#42",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 43,
    question: "Что такое стрелочные функции (Arrow Functions)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#43",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 44,
    question: "Что такое классы (Classes)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#44",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 45,
    question: "Что такое шаблонные литералы (Template Literals)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#45",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 46,
    question: "Что такое деструктуризация объекта (Object Destructuring)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#46",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 47,
    question: "Что такое модули (Modules)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#47",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 48,
    question: "Что такое объект Set?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#48",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 49,
    question: "Что такое функция обратного вызова (Callback Function)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#49",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 50,
    question: "Что такое промисы (Promises)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#50",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 51,
    question: "Что такое async/await?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#51",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 52,
    question: "В чем разница между spread-оператором и rest-оператором?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#52",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 53,
    question: "Что такое параметры по умолчанию (Default Parameters)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#53",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 54,
    question: "Что такое объектная обертка (Wrapper Objects)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#54",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 55,
    question:
      "В чем разница между явным и неявным преобразованием или приведением к типу (Implicit and Explicit Coercion)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#55",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 56,
    question: "Что такое NaN? Как проверить, является ли значение NaN?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#56",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 57,
    question: "Как проверить, является ли значение массивом?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#57",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 58,
    question:
      "Как проверить, что число является четным, без использования деления по модулю или деления с остатком (оператора " %
      ")?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#58",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 59,
    question: "Как определить наличие свойства в объекте?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#59",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 60,
    question: "Что такое AJAX?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#60",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 61,
    question: "Как в JS создать объект?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#61",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 62,
    question: "В чем разница между методами Object.freeze и Object.seal?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#62",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 63,
    question: "В чем разница между оператором «in» и методом hasOwnProperty?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#63",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 64,
    question: "Какие приемы работы с асинхронным кодом в JS Вы знаете?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#64",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 65,
    question:
      "В чем разница между обычной функцией и функциональным выражением?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#65",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 66,
    question: "Как в JS вызвать функцию?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#66",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 67,
    question: "Что такое запоминание или мемоизация (Memoization)?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#67",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 68,
    question: "Как бы Вы реализовали вспомогательную функцию запоминания?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#68",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 69,
    question:
      "Почему typeof null возвращает object? Как проверить, является ли значение null?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#69",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
  {
    id: 70,
    question: "Для чего используется ключевое слово «new»?",
    answer: {
      href: "https://habr.com/ru/articles/486820/#70",
      linkName: "answer on habr.com",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },

  /* ----------------------------- */

  {
    id: 1,
    question: "",
    answer: {
      href: "",
      linkName: "",
      answer1: "",
      image1: "",
      href2: "",
      linkName2: "",
      answer2: "",
      image2: "",
    },
  },
];

export default questionsJavaScript;
