<p></p> <p></p> <p></p> <p></p>
<p>- </p> <p>- </p> <p>- </p> <p>- </p>
<p></p> <p><span></span></p> <p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>



<pre><span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span></pre>

<span></span>
<span></span>
<span></span>
<span></span>


<blockquote></blockquote>
<br>

img/habr70/
img/css/

<ol> <li></li> <li></li> <li></li> <li></li> <li></li> </ol>

<ul> <li></li> <li></li> <li></li> <li></li> <li></li> </ul>

<p><img class='question__img' src='' alt=''></p>
<img class='question__img' src='' alt=''>

<a href='http://' target='_blank' rel='noopener noreferrer'></a>

<p><a class='question__link' href='' target='_blank' rel='noopener noreferrer'></a></p>

<p>Подробнее тут:<a class='question__link' href='' target='_blank' rel='noopener noreferrer'></a></p>

<a class='question__link' href='' target='_blank' rel='noopener noreferrer'></a>

Понравился такой формат? Держите ещё 15 интересных вопросов к собеседованию фронтенд. Проверьте себя: пишите свои ответы в комментариях.

Как изменить цвет в svg файле? Назовите хотя бы один способ.
Как можно протестировать API-сервис?
Какие проблемы могут возникнуть при использовании атрибута «defer» для подключения скриптов?
Как можно реализовать адаптивное изображение, чтобы снизить нагрузку на сервер и ускорить загрузку страницы?
В каких случаях используются анонимные функции?
Что такое специфичность CSS-селекторов и как она работает?
Представьте HTML5 как открытую веб-платформу. Из каких блоков состоит HTML5?
В чём различия между Long-Polling, Websockets и Server-Sent Events?
Какие преимущества/недостатки в использовании CSS препроцессоров?
Напишите цикл, который перебирает числа до 100, возвращая «Типичный» на числа кратные 3, «программист» на числа кратные 5 и «Типичный программист» на числа кратные 3 и 5.
В чём разница между == и ===?
Использовали ли вы систему сеток, и если да, то какую вы предпочитаете?
Для чего нужен doctype?
Опишите, как бы вы реализовали самый обычный слайдер.
Какие преимущества и недостатки у CSS и JavaScript анимаций?

Также есть вопросы, которые не относятся напрямую к JavaScript, но я всегда задаю их, чтобы проверить кандидата на common knowledge.

1. Расскажите как работает браузер?
Браузер - это программное обеспечение, которое позволяет пользователям просматривать и взаимодействовать с веб-страницами. Вот основные шаги, которые браузер выполняет для отображения веб-страницы:

Ввод URL: Пользователь вводит URL (Uniform Resource Locator) в адресную строку браузера. URL указывает на веб-страницы, которую пользователь хочет посетить.

DNS-запрос: Браузер отправляет DNS-запрос (Domain Name System) на DNS-сервер, чтобы получить IP-адрес сервера, на котором хранится веб-страница. DNS-сервер преобразует доменное имя (например, www.example.com) в соответствующий IP-адрес.

Установка соединения: Браузер устанавливает TCP-соединение с сервером, используя полученный IP-адрес. Это позволяет браузеру отправлять и получать данные от сервера.

Запрос страницы: Браузер отправляет HTTP-запрос (Hypertext Transfer Protocol) на сервер, запрашивая веб-страницу. Запрос может содержать различные параметры, такие как метод запроса (GET, POST и т. д.), заголовки и тело запроса.

Получение ответа: Сервер обрабатывает запрос и отправляет обратно HTTP-ответ, содержащий запрошенную веб-страницу. Ответ может также содержать различные заголовки, статус ответа и тело ответа.

Рендеринг страницы: Браузер получает ответ от сервера и начинает обрабатывать его. Он анализирует HTML-код страницы, строит DOM (Document Object Model) - внутреннее представление страницы, и создает дерево элементов.

Загрузка ресурсов: Браузер загружает все связанные ресурсы, такие как изображения, стили CSS, скрипты JavaScript и другие файлы, указанные в HTML-коде страницы.

Отображение страницы: Браузер использует полученные ресурсы и информацию о стилях для отображения страницы на экране. Он располагает элементы в соответствии с их CSS-свойствами, применяет шрифты, цвета и другие стили, и отображает содержимое страницы.

2. Что такое DOM
DOM (Document Object Model) - это программное представление веб-страницы или XML-документа в виде древовидной структуры. DOM представляет каждый элемент документа (такие как теги, текстовые блоки, атрибуты) в виде объектов, которые можно манипулировать с помощью языков программирования, таких как JavaScript.

В JS DOM представлен объектом Document. DOM предоставляет стандартизированый способ доступа и изменения содержимого, структуры и стилей веб-страницы. Он позволяет программистам создавать динамические и интерактивные веб-приложения, изменять содержимое страницы, добавлять или удалять элементы, изменять атрибуты и стили, а также реагировать на события, такие как щелчки мыши или нажатия клавиш.

3. Из чего состоит HTTP запрос
На этот вопрос можно ответить так:

Метод запроса (Request Method): Определяет тип операции, которую клиент хочет выполнить на сервере. Некоторые распространенные методы запроса включают GET, POST, PUT, DELETE и HEAD.

Заголовки (Headers): Представляют собой метаданные, которые передаются вместе с запросом и содержат дополнительную информацию о запросе, такую как тип содержимого, аутентификация, кеширование и другие параметры.

Тело запроса (Request Body): Используется только в некоторых методах запроса, таких как POST или PUT. Оно содержит данные, которые клиент отправляет на сервер, например, форму для отправки или JSON-объект.

4. Что такое специфичность в CSS
Специфичность в CSS определяет, какой стиль будет применен к элементу, когда есть несколько правил, которые могут быть применены к нему. Это позволяет браузеру определить, какое правило имеет больший приоритет и должно быть применено.

Приоритет такой: инлайн стили, селектор ид, селектор класса, селектор тега.

Если два правила имеют одинаковую специфичность, то последнее правило в таблице стилей будет применено.

5. Разница между cookie, sessionStorage и localStorage
Веб-браузеры предоставляют несколько способов хранения данных на стороне клиента, таких как cookie, sessionStorage и localStorage.

Cookie:

Cookie - это небольшие текстовые файлы, которые хранятся на компьютере пользователя.

Cookie создаются сервером и отправляются в браузер, где они хранятся и отправляются обратно на сервер при каждом запросе.

Cookie имеют ограничение по размеру (обычно до 4 КБ) и количество (обычно до 20).

Cookie могут иметь срок годности, после которого они автоматически удаляются.

Cookie могут быть доступны как на сервере, так и на клиенте.

Cookie могут использоваться для хранения информации, такой как предпочтения пользователя, данные аутентификации и отслеживание состояния сеанса.

sessionStorage:

sessionStorage - это механизм хранения данных, доступный только в рамках одной вкладки браузера.

Данные, сохраненные в sessionStorage, остаются доступными только во время сеанса работы с текущей вкладкой браузера. При закрытии вкладки данные удаляются.

sessionStorage имеет ограничение по размеру (обычно до 5 МБ).

sessionStorage может использоваться для временного хранения данных, таких как состояние формы или временные настройки.

localStorage:

localStorage - это механизм хранения данных, доступный в рамках одного домена.

Данные, сохраненные в localStorage, остаются доступными даже после закрытия браузера и перезапуска компьютера.

localStorage имеет ограничение по размеру (обычно до 5 МБ).

localStorage может использоваться для хранения постоянных данных, таких как настройки пользователя или кэшированные данные.



